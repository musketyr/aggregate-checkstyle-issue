/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2021 Vladimir Orany.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'org.kordamp.gradle.groovy-project'
    id 'org.kordamp.gradle.checkstyle'
    id 'org.kordamp.gradle.codenarc'
}

config {
    release = (rootProject.findProperty('release') ?: false).toBoolean()

    info {
        name        = 'Agorapulse Gradle Plugins'
        vendor      = 'Agorapulse'
        description = 'Agorapulse Gradle Plugins'

        links {
            website      = 'https://github.com/' + slug
            issueTracker = 'https://github.com/' + slug + '/issues'
            scm          = 'https://github.com/' + slug + '.git'
        }

        people {
            person {
                id    = 'musketyr'
                name  = 'Vladimir Orany'
                roles = ['developer']
            }
        }

        repositories {
            repository {
                credentials {
                    username = 'deployer'
                    password = System.getenv("DEPLOYER_PASSWORD")
                }
                name = 'artifactory-releases'
                url = "https://agorapulse.jfrog.io/agorapulse/gradle-plugins-releases-local/"
            }
        }
    }

    licensing {
        enabled = false
    }

    publishing {
        signing {
            enabled = false
        }
        releasesRepository  = 'artifactory-releases'
    }

    quality {
        checkstyle {
            toolVersion = '8.27'
        }

        codenarc {
            toolVersion = '1.5'
        }
    }

    config {
        docs {
            javadoc {
                enabled = false
            }
        }
    }
}

allprojects {
    repositories {
        mavenCentral()
        gradlePluginPortal()
        maven { url 'https://repo.grails.org/grails/core' }
        maven { url 'https://repo.grails.org/artifactory/core' }
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url "https://repo.spring.io/release"  }
    }

    license {
        exclude '**/*.json'
        exclude '***.yml'
    }
}

gradleProjects {
    subprojects {
        dirs(['libs', 'plugins', 'examples']) { Project subproject ->
            sourceCompatibility = 1.8
            targetCompatibility = 1.8

            repositories {
                mavenCentral()
            }

            // location independent tests (useful for stable CI builds)
            tasks.withType(Test) {
                useJUnitPlatform()
                systemProperty 'user.timezone', 'UTC'
                systemProperty 'user.language', 'en'
            }

            tasks.withType(JavaCompile) {
                options.encoding = "UTF-8"
                options.compilerArgs.add('-parameters')
            }

            tasks.withType(GroovyCompile) {
                groovyOptions.forkOptions.jvmArgs.add('-Dgroovy.parameters=true')
            }

            dependencies {
                api platform("org.codehaus.groovy:groovy-bom:$groovyVersion")
                implementation platform("org.codehaus.groovy:groovy-bom:$groovyVersion")
                compileOnly platform("org.codehaus.groovy:groovy-bom:$groovyVersion")
                testImplementation platform("org.codehaus.groovy:groovy-bom:$groovyVersion")
            }

            // useful for IntelliJ
            task cleanOut(type: Delete) {
                delete file('out')
            }

            clean.dependsOn cleanOut
        }

        dir('examples') {
            config {
                publishing {
                    enabled = false
                }
            }
        }

        dirs(['libs', 'plugins']) { Project subproject ->
            processResources {
                filesMatching('**/org.codehaus.groovy.runtime.ExtensionModule') {
                    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [VERSION: version])
                }
            }

            jar {
                manifest.attributes provider: 'gradle'
            }

            dependencies {
                testImplementation group: 'org.spockframework', name: 'spock-core', version: spockVersion
                testImplementation "com.agorapulse.testing:fixt:0.2.3"
                testImplementation gradleTestKit()
                testImplementation(platform('org.junit:junit-bom:5.8.2'))
                testImplementation('org.junit.jupiter:junit-jupiter')
            }

            subproject.tasks.withType(PublishToMavenRepository) { PublishToMavenRepository task ->
                if (task.name.contains('publishPluginMaven')) {
                    task.enabled(false)
                }
            }
        }
    }
}


check.dependsOn('aggregateCheckstyle', 'aggregateCodenarc', 'aggregateAllTestReports', 'coveralls')
